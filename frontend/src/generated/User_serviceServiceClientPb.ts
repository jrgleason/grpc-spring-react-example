/**
 * @fileoverview gRPC-Web generated client stub for org.jrg.grpc
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: user_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as user_service_pb from './user_service_pb'; // proto import: "user_service.proto"


export class UserServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetUser = new grpcWeb.MethodDescriptor(
    '/org.jrg.grpc.UserService/GetUser',
    grpcWeb.MethodType.UNARY,
    user_service_pb.GetUserRequest,
    user_service_pb.User,
    (request: user_service_pb.GetUserRequest) => {
      return request.serializeBinary();
    },
    user_service_pb.User.deserializeBinary
  );

  getUser(
    request: user_service_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_service_pb.User>;

  getUser(
    request: user_service_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_service_pb.User) => void): grpcWeb.ClientReadableStream<user_service_pb.User>;

  getUser(
    request: user_service_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_service_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/org.jrg.grpc.UserService/GetUser',
        request,
        metadata || {},
        this.methodDescriptorGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/org.jrg.grpc.UserService/GetUser',
    request,
    metadata || {},
    this.methodDescriptorGetUser);
  }

  methodDescriptorGetAllUsers = new grpcWeb.MethodDescriptor(
    '/org.jrg.grpc.UserService/GetAllUsers',
    grpcWeb.MethodType.UNARY,
    user_service_pb.GetAllUsersRequest,
    user_service_pb.GetAllUsersResponse,
    (request: user_service_pb.GetAllUsersRequest) => {
      return request.serializeBinary();
    },
    user_service_pb.GetAllUsersResponse.deserializeBinary
  );

  getAllUsers(
    request: user_service_pb.GetAllUsersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_service_pb.GetAllUsersResponse>;

  getAllUsers(
    request: user_service_pb.GetAllUsersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_service_pb.GetAllUsersResponse) => void): grpcWeb.ClientReadableStream<user_service_pb.GetAllUsersResponse>;

  getAllUsers(
    request: user_service_pb.GetAllUsersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_service_pb.GetAllUsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/org.jrg.grpc.UserService/GetAllUsers',
        request,
        metadata || {},
        this.methodDescriptorGetAllUsers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/org.jrg.grpc.UserService/GetAllUsers',
    request,
    metadata || {},
    this.methodDescriptorGetAllUsers);
  }

  methodDescriptorCreateUser = new grpcWeb.MethodDescriptor(
    '/org.jrg.grpc.UserService/CreateUser',
    grpcWeb.MethodType.UNARY,
    user_service_pb.CreateUserRequest,
    user_service_pb.User,
    (request: user_service_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    user_service_pb.User.deserializeBinary
  );

  createUser(
    request: user_service_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_service_pb.User>;

  createUser(
    request: user_service_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_service_pb.User) => void): grpcWeb.ClientReadableStream<user_service_pb.User>;

  createUser(
    request: user_service_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_service_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/org.jrg.grpc.UserService/CreateUser',
        request,
        metadata || {},
        this.methodDescriptorCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/org.jrg.grpc.UserService/CreateUser',
    request,
    metadata || {},
    this.methodDescriptorCreateUser);
  }

  methodDescriptorUpdateUser = new grpcWeb.MethodDescriptor(
    '/org.jrg.grpc.UserService/UpdateUser',
    grpcWeb.MethodType.UNARY,
    user_service_pb.UpdateUserRequest,
    user_service_pb.User,
    (request: user_service_pb.UpdateUserRequest) => {
      return request.serializeBinary();
    },
    user_service_pb.User.deserializeBinary
  );

  updateUser(
    request: user_service_pb.UpdateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_service_pb.User>;

  updateUser(
    request: user_service_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_service_pb.User) => void): grpcWeb.ClientReadableStream<user_service_pb.User>;

  updateUser(
    request: user_service_pb.UpdateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_service_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/org.jrg.grpc.UserService/UpdateUser',
        request,
        metadata || {},
        this.methodDescriptorUpdateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/org.jrg.grpc.UserService/UpdateUser',
    request,
    metadata || {},
    this.methodDescriptorUpdateUser);
  }

  methodDescriptorDeleteUser = new grpcWeb.MethodDescriptor(
    '/org.jrg.grpc.UserService/DeleteUser',
    grpcWeb.MethodType.UNARY,
    user_service_pb.DeleteUserRequest,
    user_service_pb.DeleteUserResponse,
    (request: user_service_pb.DeleteUserRequest) => {
      return request.serializeBinary();
    },
    user_service_pb.DeleteUserResponse.deserializeBinary
  );

  deleteUser(
    request: user_service_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<user_service_pb.DeleteUserResponse>;

  deleteUser(
    request: user_service_pb.DeleteUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: user_service_pb.DeleteUserResponse) => void): grpcWeb.ClientReadableStream<user_service_pb.DeleteUserResponse>;

  deleteUser(
    request: user_service_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: user_service_pb.DeleteUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/org.jrg.grpc.UserService/DeleteUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/org.jrg.grpc.UserService/DeleteUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteUser);
  }

  methodDescriptorStreamUsers = new grpcWeb.MethodDescriptor(
    '/org.jrg.grpc.UserService/StreamUsers',
    grpcWeb.MethodType.SERVER_STREAMING,
    user_service_pb.StreamUsersRequest,
    user_service_pb.User,
    (request: user_service_pb.StreamUsersRequest) => {
      return request.serializeBinary();
    },
    user_service_pb.User.deserializeBinary
  );

  streamUsers(
    request: user_service_pb.StreamUsersRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<user_service_pb.User> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/org.jrg.grpc.UserService/StreamUsers',
      request,
      metadata || {},
      this.methodDescriptorStreamUsers);
  }

}

