name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '24'

jobs:
  # Test Java Backend
  test-backend:
    name: Test gRPC Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'oracle'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        ./mvnw clean test
    
    - name: Build backend
      working-directory: ./backend
      run: |
        ./mvnw clean package -DskipTests
    
    - name: Upload backend artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar

  # Test Node.js Services
  test-nodejs-services:
    name: Test Node.js Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [apollo-gateway, user-graphql-service, frontend-graphql]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json
    
    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: npm ci
    
    - name: Run linting
      working-directory: ./${{ matrix.service }}
      run: |
        if npm run lint --dry-run 2>/dev/null; then
          npm run lint
        else
          echo "No lint script found, skipping..."
        fi
    
    - name: Run tests
      working-directory: ./${{ matrix.service }}
      run: |
        if npm run test --dry-run 2>/dev/null; then
          npm run test
        else
          echo "No test script found, skipping..."
        fi
    
    - name: Build service
      working-directory: ./${{ matrix.service }}
      run: |
        if npm run build --dry-run 2>/dev/null; then
          npm run build
        else
          echo "No build script found, skipping..."
        fi

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-nodejs-services]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: backend/target/
    
    - name: Build and test with Docker Compose
      run: |
        # Build all services
        docker-compose -f docker-compose.graphql.yml build
        
        # Start services in background
        docker-compose -f docker-compose.graphql.yml up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
        
        # Health checks
        echo "Checking service health..."
        
        # Check gRPC Backend
        docker-compose -f docker-compose.graphql.yml exec -T grpc-backend \
          timeout 10 sh -c 'until nc -z localhost 9090; do sleep 1; done' || echo "gRPC backend not ready"
        
        # Check User GraphQL Service
        curl -f http://localhost:4001/health || echo "User service health check failed"
        
        # Check Apollo Gateway
        curl -f http://localhost:4000/health || echo "Gateway health check failed"
        
        # Check Frontend
        curl -f http://localhost:3000 || echo "Frontend health check failed"
        
        # Run a sample GraphQL query
        echo "Testing GraphQL endpoint..."
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{"query":"{ users { id name email } }"}' \
          http://localhost:4000/graphql || echo "GraphQL query failed"
    
    - name: Collect service logs
      if: failure()
      run: |
        echo "=== Docker Compose Logs ==="
        docker-compose -f docker-compose.graphql.yml logs
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.graphql.yml down -v

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images (only on main branch)
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [integration-test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: backend/target/
    
    - name: Build and push Docker images
      run: |
        # Build and push all services
        docker-compose -f docker-compose.graphql.yml build
        
        # Tag and push images (update with your Docker Hub username)
        # docker tag stream-example-grpc-backend ${{ secrets.DOCKER_USERNAME }}/grpc-backend:latest
        # docker tag stream-example-apollo-gateway ${{ secrets.DOCKER_USERNAME }}/apollo-gateway:latest
        # docker tag stream-example-user-graphql-service ${{ secrets.DOCKER_USERNAME }}/user-graphql-service:latest
        # docker tag stream-example-frontend-graphql ${{ secrets.DOCKER_USERNAME }}/frontend-graphql:latest
        
        # docker push ${{ secrets.DOCKER_USERNAME }}/grpc-backend:latest
        # docker push ${{ secrets.DOCKER_USERNAME }}/apollo-gateway:latest
        # docker push ${{ secrets.DOCKER_USERNAME }}/user-graphql-service:latest
        # docker push ${{ secrets.DOCKER_USERNAME }}/frontend-graphql:latest
        
        echo "Docker build completed. Uncomment push commands when Docker Hub is configured."

  # Deploy (placeholder for future deployment)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-and-push]
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deployment step - configure based on your deployment target"
        echo "Options: AWS ECS, Kubernetes, Docker Swarm, etc."
